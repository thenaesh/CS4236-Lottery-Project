loadScript('init.js')
loadScript('init.js')\
loadScript('init.js')
viewAllAccounts\
viewAllAccounts()
createAccount()
viewAllAccounts
viewAllAccounts()
loadScript('init.js')
getAccount(0)
getAccount(-1)
getAccount(10)
getAccount(9)
loadScript('init.js')
setEtherBase(getAccount(0))
miner.start(8)
miner.stop()
getEtherBalance(getAccount(0))
for (var i = 0; i < 10; i++) console.log(getEtherBalance(getAccount(i)));
sendEther(getAccount(0), getAccount(1), 10)
unlockAccount(getAccount(0))
sendEther(getAccount(0), getAccount(1), 10)
miner.start(8)
miner.stop()
for (var i = 0; i < 10; i++) console.log(getEtherBalance(getAccount(i)));
loadScript('init.js')
eth.contract(abiArray)
eth.contract(abi)
loadScript('init.js')
compile
getContract\
loadScript('init.js')
compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get returns (uint) { return numbers[msg.sender]; } }")
compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get() returns (uint) { return numbers[msg.sender]; } }")
var contracts = compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get() returns (uint) { return numbers[msg.sender]; } }")
contracts
for (var i = 0; i < 10; i++) console.log(getEtherBalance(getAccount(i)));
deploy(contracts.WateringHole, getAccount(1))
unlockAccount(getAccount(1))
deploy(contracts.WateringHole, getAccount(1))
miner.start(1)
miner.stop()
var filter = eth.filter({fromBlock:0, toBlock:'latest', address: "0x.."});
filter.get(function (err, transactions) {
  transactions.forEach(function (tx) {
    var txInfo = eth.getTransactionReceipt(tx.transactionHash);
    /* Here you have
    txInfo.contractAddress;
    txInfo.from;
    txInfo.input;
    */
  });
});
eth.getTransactionReceipt("0x10f41911430362ab8721312db13b69f41c474f7d4977bf620830914374c4ee77")
var wateringhole = getContract(contracts.WateringHole, "0x10f41911430362ab8721312db13b69f41c474f7d4977bf620830914374c4ee77")
wateringhole
getEtherBalance(getAccount(1))
eth.getCode(wateringhole)
wateringhole
eth.getCode(wateringhole.address)
var wateringhole = getContract(contracts.WateringHole, "0x6184c721b0c149adef7a8b2b265e34ed0ba3d006")
wateringhole
eth.getCode(wateringhole.address)
miner.start(1)
miner.stop()
eth.getCode(wateringhole.address)
wateringhole.kill.sendTransaction({from:getAccount(1)})
unlockAccount(getAccount(1))
wateringhole.kill.sendTransaction({from:getAccount(1)})
miner.start(1)
miner.stop()
eth.getCode(wateringhole.address)
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
loadScript('init.js')
var contracts = compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get() returns (uint) { return numbers[msg.sender]; } }")
contracts
for (var i = 0; i < 10; i++) console.log(getEtherBalance(getAccount(i));
)
for (var i = 0; i < 10; i++) console.log(getEtherBalance(getAccount(i)));
unlockAccount(getAccount(1))
deploy(contracts.WateringHole, getAccount(1))
miner.start(1)
miner.stop()
for (var i = 0; i < 10; i++) console.log(getEtherBalance(getAccount(i)));
loadScript('init.js')
deploy(contracts.WateringHole, getAccount(1))
miner.start(1)
miner.stop()
loadScript('init.js')
unlockAccount(getAccount(0))
unlockAccount(getAccount(1))
sendEther(getAccount(0), getAccount(1), 100)
getEtherBalance(getAccount(1))
getEtherBalance(getAccount(0))
var contracts = compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get() returns (uint) { return numbers[msg.sender]; } }")
contracts
var wateringhole = deploy(contracts.WateringHole, getAccount(1))
wateringhole
getEtherBalance(getAccount(1))
loadScript('init.js')
unlockAccount(getAccount(0))
getEtherBalance(getAccount(1))
unlockAccount(getAccount(1))
var contracts = compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get() returns (uint) { return numbers[msg.sender]; } }")
contracts
var wateringhole = deploy(contracts.WateringHole, getAccount(1))
loadScript('init.js')
var wateringhole = deploy(contracts.WateringHole, getAccount(1))
wateringhole
eth.getCode(wateringhole.address)
getEtherBalance(getAccount(1))
sendEther(getAccount(0), getAccount(2), 50)
unlockAccount(getAccount(0))
sendEther(getAccount(0), getAccount(2), 50)
sendEther(getAccount(0), getAccount(3), 50)
unlockAccount(getAccount(2))
unlockAccount(getAccount(3))
wateringhole.set.sendTransaction(1234, {from: getAccount(2), gas: 1000000})
wateringhole.set.sendTransaction(8888, {from: getAccount(3), gas: 1000000})
wateringhole.get.sendTransaction({from: getAccount(3), gas: 1000000})
eth.getTransactionReceipt("0x3b848831fbf80dd6bd52b85532f672394798bdce728dc4c5906c17c01a3daff0")
wateringhole.kill.sendTransaction({from: getAccount(1)})
unlockAccount(getAccount(1))
wateringhole.kill.sendTransaction({from: getAccount(1)})
wateringhole
eth.getCode(wateringhole.address)
var contracts = compile("contract WateringHole { mapping (address => uint) public numbers; address bartender;  function WateringHole() { bartender = msg.sender; } function kill() { if (msg.sender == bartender) selfdestruct(bartender); }  function set(uint n) { numbers[msg.sender] = n; } function get() constant returns (uint) { return numbers[msg.sender]; } }")
contracts\
contracts
for (var i = 0; i < 4; i++) unlockAccount(getAccount(i))
var wateringhole = deploy(contracts.WateringHole, getAccount(1))
wateringhole
eth.getCode(wateringhole.address)
wateringhole.set.sendTransaction(1234, {from: getAccount(2), gas: 1000000})
wateringhole.numbers.call(getAccount(2)))
wateringhole.numbers.call(getAccount(2))
wateringhole.set.sendTransaction(8888, {from: getAccount(3), gas: 1000000})
wateringhole.numbers.call(getAccount(3))
wateringhole.numbers.call(getAccount(2))
wateringhole.numbers.call(getAccount(3))